<?php
/*
* Implement hook_menu for parent Assignment menu
*
*/


function lw_parent_assignment_menu($form, $form_state) {

    $items['parent/assignment/%'] = array(
        //'type' => MENU_DEFAULT_LOCAL_TASK,
        'title' => 'Create your own customised assignment for your Child or go back to view your older assignments when you need to.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('generate_parent_assignment_code_form'),
        'access callback' => TRUE,
    );
    $items['report/parent/assignment/%'] = array(
        //'type' => MENU_DEFAULT_LOCAL_TASK,
        'title' => 'Edit Assignment',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('generate_parent_assignment_code_form'),
        'access callback' => TRUE,
    );
    $items['report/parent/assignments/view'] = array(
        //'type' => MENU_DEFAULT_LOCAL_TASK,
        'title' => 'Create your own customised assignment for your students or go back to view your older assignments when you need to.',
        'page callback' => 'drupal_get_form',
        //'page arguments' => array('generate_parent_assignment_code_form'),
        'access callback' => TRUE,
    );
    $items['report/parent/assignments/view/%'] = array(
        //'type' => MENU_DEFAULT_LOCAL_TASK,
        //'title' => 'Detail Assignment',
        'page callback' => 'drupal_get_form',
        // 'page arguments' => array('generate_parent_assignment_code_form'),
        'access callback' => TRUE,
    );
    $items['report/parent/view/assignment/worksheet/%'] = array(
        //'type' => MENU_DEFAULT_LOCAL_TASK,
        //'title' => 'Worksheet',
        'page callback' => 'drupal_get_form',
        // 'page arguments' => array('generate_parent_assignment_code_form'),
        'access callback' => TRUE,
    );
    $items['report/parent/change/question'] = array(
        //'type' => MENU_DEFAULT_LOCAL_TASK,
        'title' => 'Change Question',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_question'),
        'access callback' => TRUE,
    );

    return $items;

}

function generate_parent_assignment_code_form($form, &$form_state) {
   $Child_id = arg(2);
   $profile = profile2_load_by_user($Child_id,'student');
  // $subject_tid = $profile-> field_subjects['und'][0]['tid'];
    $subject = $profile-> field_subjects['und'];
    $subject_id = array();
    foreach($subject as $value){
        $subject_id[] = $value['tid'];
    }
  $class = db_select('taxonomy_term_hierarchy', 'th')
        ->fields("th", array('tid','parent'))
        ->condition('parent', $subject_id, 'IN')
        //->orderBy('parent')
        ->execute()
        ->fetchAll();
    $a = array();
    foreach($class as $value) {
           $a[$value->parent] = $value->tid ;
    }
    $final_topics = array();
    foreach($a as $key=>$value){

        $final_topics[] = taxonomy_get_children($key);
    }
    $topic_options = array();
    foreach($final_topics as $topic_list) {

        foreach($topic_list as $topic_names) {
            $topic_options[$topic_names->tid] = $topic_names->name;
        }
    }
  /*Code to get Class(es) of a Teacher STARTS*/
    $result = db_select('profile', 'p')
        ->fields('p',array('pid'))
        ->condition('uid',$Child_id)
        ->condition('type','student')
        ->range(0, 1)
        ->execute()
        ->fetchAll();
    $pid = $result[0]->pid;

    $subject_query = db_query("SELECT th.*  FROM `taxonomy_term_hierarchy` th
 JOIN taxonomy_term_data td ON th.tid = td.tid AND td.vid = 7
 WHERE th.tid IN (SELECT a.tid from taxonomy_term_hierarchy a, taxonomy_term_hierarchy b WHERE a.parent = b.tid and b.parent = 0) AND th.parent != 0");
    $subject_in = "(";
    foreach($subject_query as $subject_row) {
        $subject_in .= $subject_row->tid . ",";
    }
    $subject_in .= "-1)";

$re = db_query("SELECT field_schools_tid, parent, field_class1_tid, field_branch_tid, field_subjects_tid
   FROM field_data_field_schools s, field_data_field_class1 cl, field_data_field_branch b, field_data_field_subjects sb, taxonomy_term_hierarchy th
 WHERE s.entity_id = :pid
 AND field_subjects_tid IN $subject_in
 AND s.entity_id = cl.entity_id
 AND s.entity_id = b.entity_id
 AND s.entity_id = sb.entity_id
 AND s.bundle =  'student'
 AND th.tid = cl.field_class1_tid", array(':pid'=> $pid));

$subject_query = db_query("SELECT th.*  FROM `taxonomy_term_hierarchy` th
 JOIN taxonomy_term_data td ON th.tid = td.tid AND td.vid = 7
 WHERE th.tid IN (SELECT a.tid from taxonomy_term_hierarchy a, taxonomy_term_hierarchy b WHERE a.parent = b.tid and b.parent = 0) AND th.parent != 0");
    $subject_in = "(";
    foreach($subject_query as $subject_row) {
        $subject_in .= $subject_row->tid . ",";
    }
    $subject_in .= "-1)";
    $re = db_query("SELECT field_schools_tid, parent, field_class_user_tid, 
    	                   field_branch_tid, field_subjects_tid
                    FROM   field_data_field_schools s, field_data_field_class_user cl, 
                           field_data_field_branch b, field_data_field_subjects sb,
                           taxonomy_term_hierarchy th
 WHERE s.entity_id = :pid
 AND field_subjects_tid IN $subject_in
 AND s.entity_id = cl.entity_id
 AND s.entity_id = b.entity_id
 AND s.entity_id = sb.entity_id
 AND s.bundle =  'student'
 AND th.tid = cl.field_class_user_tid", array(':pid'=> $pid));
    $user_sub_tid = array();
    $user_class_tid = array();
    $query_string = array();
    foreach($re as $classname) {
        $user_sub_tid[] = $classname->field_subjects_tid;
        if($classname->parent != 0) {
            $user_class_tid[$classname->parent][$classname->field_class1_tid] = $classname->field_class1_tid;
        }
        $query_string[] =$classname->field_class1_tid;
    }
    $class_name = db_select('taxonomy_term_data', 'td')
        ->fields("td", array('tid', 'name'))
        ->condition('tid', $query_string, 'IN')
        ->orderBy('tid')
        ->execute()
        ->fetchAll();
    $term_name_array = array();
    foreach($class_name as $row) {
        $term_name_array[$row->tid] = $row->name;
    }
    //class option array
    $options_class = array();
    foreach($user_class_tid as $key => $parent) {
        foreach($parent as $c_key => $child) {
            $options_class[$c_key] =$term_name_array[$key] . $term_name_array[$c_key];
        }
    }
    /*Code to get Class(es) of a Teacher ENDS*/
    $ts = taxonomy_term_load_multiple($user_sub_tid);
    $options_class1 = array();
    foreach ($ts as $key=>$term) {
        $options_class1[$term->tid] = $term->name;
    }
    foreach ($options_class1 as $key => $value) {
        $parent_class = taxonomy_get_parents($key);
        $parent_class_tid = key($parent_class);
        $q_res = db_select('taxonomy_term_data', 'td')
            ->fields("td", array('name'))
            ->condition('tid', $parent_class_tid, '=')
            ->execute()
            ->fetchAssoc();
        $c_name = $q_res['name'];
        $sub_arr[$key] = $c_name .'-'.$value;
    }
    asort($sub_arr);
    $cl_id = taxonomy_get_parents($selected_topic_id);
    $clas_id = key($cl_id);
    $value_dropdown_first = isset($form_state['values']['select_subject']) ? $form_state['values']['select_subject'] : (isset($clas_id)?$clas_id:key($sub_arr));
print_r($value_dropdown_first);
    $form['select_subject'] = array(
        '#type' => 'select',
        '#title' => 'Select Subject',
       // '#maxlength' => 127,
        '#options' => $sub_arr,
        '#ajax' => array(
            'event'=>'change',
            'callback' =>'lw_parent_assignment_ajax_callback',
            'wrapper' => 'topic_wrapper1',
           //  'progress' => array(
           //     'message' => '',
           // ),
        ),
    );
// if(isset($form_state['values']['select_subject'])){
//     $option = lw_parent_assignment_second_dropdown_options($value_dropdown_first);
// } else {
//     $option = array('-Select Topic-'); // 0 is default value
// }
    $form['select_topic'] = array(
        '#type' => 'select',
        '#title' => 'Select Topic',
        '#options' => lw_parent_assignment_second_dropdown_options($value_dropdown_first),
        '#prefix' => '<div class="form-item" id="topic_wrapper1">',
        '#suffix' => '</div>',
        //'#default_value' => $selected_topic_id,
       );
    $form['assignment_created_date'] = array(
        '#type' => 'textfield',
        //'#type' => 'hidden',
        '#title' => 'current_date',
        //'#element_validate' => array('_headbar_is_empty'),
        //'#required' => TRUE,
        //'#access' => FALSE,
        '#default_value' => date('d/m/Y'),
    );


    $form['#attributes'] = array('class' => 'form-item');

    $form['assignment_due_date'] = array(
        '#type' => 'date_popup',
        '#date_format' => 'j F Y',
        //'#date_year_range' => '0:+2',
        '#datepicker_options' => array(
        'minDate' => 0,
        ),
        '#title' => 'Set a due date',
        //'#attributes' =>array('placeholder' => t('Calender Section')),
        //'#element_validate' => array('_headbar_is_empty'),
        '#required' => TRUE,
        '#default_value' => !empty($due_date) ? $due_date : '',
    );
    $form['info_text'] = array(
        '#type'=> 'item',
        '#markup'=> ('<div>'.'<span class="first-description">'.'You may select upto a maximum of 20 questions per assignment'.'</span>'.'<br/>'.'<span class="second-description">'.'Choose the number of questions required at each level of difficulty'.'</span>'.'</div>'),
    );

    $form['level_header'] = array(
        '#type'=> 'item',
        '#markup'=> ('<div class="question-header">'.'<span class="level">'.'Difficulty level'.'</span>'.'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.'<span class="no-question">'.'No. of Questions '.'</span>'.'</div>'),
    );

    $form['very_easy'] = array(
        '#type' => 'textfield',
        '#title' => 'Very Easy',
        '#size'=>'5',
        '#id'=>'very_easy_textbox',
        '#required' => TRUE,
        //'#element_validate' => array('_headbar_is_empty'),
        //'#attributes' =>array('placeholder' => t('#input')),
        '#default_value' => !empty($very_easy) ? $very_easy : '',
    );
    $form['easy'] = array(
        '#type' => 'textfield',
        '#title' => 'Easy',
        '#size'=>'5',
        //'#attributes' =>array('placeholder' => t('#input')),
        '#required' => TRUE,
        //'#element_validate' => array('_headbar_is_empty'),
        '#default_value' => !empty($easy) ? $easy : '',
    );
    $form['difficult'] = array(
        '#type' => 'textfield',
        '#title' => 'Difficult',
        '#size'=>'5',
        //'#attributes' =>array('placeholder' => t('#input')),
        '#required' => TRUE,
        //'#element_validate' => array('_headbar_is_empty'),
        '#default_value' => !empty($difficult) ? $difficult : '',
    );
    $form['very_difficult'] = array(
        '#type' => 'textfield',
        '#title' => 'Very Difficult',
        '#size'=>'5',
        //'#attributes' =>array('placeholder' => t('#input')),
        '#required' => TRUE,
        //'#element_validate' => array('_headbar_is_empty'),
        '#default_value' => !empty($very_difficult) ? $very_difficult : '',
    );
    $form['total'] = array(
        '#type' => 'textfield',
        '#title' => 'Total',
        '#size'=>'5',
        //'#attributes' =>array('placeholder' => t('Auto Sum of 4 above')),
        '#required' => TRUE,
        //'#element_validate' => array('_headbar_is_empty'),
        '#default_value' => !empty($total) ? $total : '',
    );
    $form['error_text'] = array(
        '#type'=> 'item',
        '#markup'=> ('<span id="error_msg"></span>'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => isset($assignment_id)?t('Update'):t('Create'),
    );

    return $form;

}


/*ajax for topic dropdown */


function lw_parent_assignment_ajax_callback($form, &$form_state) {
	print_r($form);
    return $form['select_topic'];
}

function lw_parent_assignment_second_dropdown_options($key = '') {

$key = 158;

    $get_parent_child_ids = db_select('taxonomy_term_hierarchy', 'th')
        ->fields("th", array('tid','parent'))
        ->condition('parent', $key, '=')
        //->orderBy('parent')
        ->execute()
        ->fetchAll();
    $a = array();
    foreach($get_parent_child_ids as $value) {


        $a[$value->parent][] = $value->tid ;
    }
    $final_topics = array();
    foreach($a as $key=>$value){

        $final_topics[] = taxonomy_get_children($key);
    }
    // print_r($final_topics);
    $topic_options_list = array();
    foreach($final_topics as $topic_list) {

        foreach($topic_list as $topic_names) {
            $topic_options_list[$topic_names->tid] = $topic_names->name;
        }
        asort($topic_options_list);
    }
    return $topic_options_list;
}

